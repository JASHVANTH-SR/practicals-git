Sure, here's a simple implementation of a DNS client and server simulation using UDP sockets in Python for resolving domain names for Google and Amazon:

DNS Server:
```
import socket

dns_ip = '127.0.0.1'
dns_port = 5353
dns_table = {
    'google.com': '216.58.194.174',
    'amazon.com': '176.32.103.205'
}

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((dns_ip, dns_port))

print('DNS server listening on {}:{}'.format(dns_ip, dns_port))

while True:
    data, addr = sock.recvfrom(1024)
    domain = data.decode('utf-8').strip()
    if domain in dns_table:
        ip = dns_table[domain]
        sock.sendto(ip.encode('utf-8'), addr)
        print('Sent DNS response for {}: {}'.format(domain, ip))
    else:
        error = 'Domain not found'
        sock.sendto(error.encode('utf-8'), addr)
        print('Sent DNS error response for {}: {}'.format(domain, error))
```



DNS Client:
```
import socket

dns_ip = '127.0.0.1'
dns_port = 5353

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

while True:
    domain = input('Enter domain name to resolve (or "exit" to quit): ')
    if domain == 'exit':
        break
    sock.sendto(domain.encode('utf-8'), (dns_ip, dns_port))
    data, server = sock.recvfrom(1024)
    ip = data.decode('utf-8').strip()
    print('Resolved {} to IP address: {}'.format(domain, ip))
```

Note: Make sure to run the DNS server program before running the DNS client program. Also, replace the IP addresses for 'google.com' and 'amazon.com' in the DNS server program with the actual IP addresses of the respective domains.
